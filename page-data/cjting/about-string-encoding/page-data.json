{"componentChunkName":"component---node-modules-suziwen-gatsby-theme-sculpting-src-templates-template-blog-post-js","path":"/cjting/about-string-encoding","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://suziwen.github.io/acorns"}},"storyWriterMarkdown":{"id":"fa3782e9-a18b-5e5b-9199-c9e5205c001e","html":"\n\n\t<div class=\"preview html_preview xsj_export_zip\"><div style=\"overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; display: none;\"><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"/></svg></div><blockquote class=\"markdown_blockquote\">\n<p class=\"xsj_paragraph xsj_paragraph_level_1\"><span class=\"xsj_placeholder_span\"></span>本文为转载文章,如果涉及侵权,请联系 <a href=\"mailto:suziwen1@gmail.com\" class=\"xsj_link xsj_auto_link\">suziwen1@gmail.com</a>,会第一时间删除</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_1\"><span class=\"xsj_placeholder_span\"></span>转载自: <a href=\"https://cjting.me/2014/04/24/about-string-encoding/\" class=\"xsj_link xsj_auto_link\">https://cjting.me/2014/04/24/about-string-encoding/</a></p>\n</blockquote>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">很早之前就碰到过\"乱码\"这个现象，当时非常困惑，完全不能理解发生了什么。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">上大学以后，虽然开始接触计算机，不过我就没看到过具体讲解字符编码的内容。对这个领域始终是感到非常模糊。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">不过，最近好像豁然开朗了一下，感觉突然就明白了这个问题。</p>\n<!--more-->\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">下面我来解释一下我所理解的字符编码。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">首先，所有的字符（或者说所有的信息）都是以二进制的形式存储在计算机中。所谓的编码就是 <strong class=\"markdown_strong_asterisk\">映射字符与相应的二进制之间的规则</strong>。这样的映射可以任意定义，只要大家都遵守就行了。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">比如非常经典的 ASCII 码，就将英文中的字符映射为一个字节。比如，<code>A</code> 这个字符编码为 65，存储在计算机中为 <code>01000001</code>，占据一个字节。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">其他的所有字符编码都是同理，比如汉字的经典编码 GBK。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">以 丁 这个汉字为例，GBK 编码为 <code>0xB6A1</code>，存储为二进制是 <code>10110110 10100001</code>（直接将 B6A1 换成二进制），两个字节。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">用工具查看内部字节可以看出，如图：</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\"></p><div class=\"story_image_container story_block_image\"><div class=\"story_image\"><div class=\"gatsby-wrapper-image\" style=\"display:inline-block;max-width: 100%;width:537px; margin-left: auto; margin-right: auto;position:relative;\"><div style=\"width:100%;display:block;padding-bottom: 11.71875%;\"></div><img class=\"background_image\" src=\"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='46'%20viewBox='0%200%20400%2046'%20preserveAspectRatio='none'/%3e\" style=\"position: absolute;top:0;left:0;width: 100%;height:100%;object-fit: cover;object-position: center;\"><img src=\"/acorns/static/2a811de4a57e8b5a695713da2bd5a57a/6b964/1586492860476.jpg\" alt title name=\"images/1586492860476.jpg\" data-src=\"./images/1586492860476.jpg\" class=\"front_image\" loading=\"lazy\" srcSet=\"/acorns/static/2a811de4a57e8b5a695713da2bd5a57a/e4a55/1586492860476.jpg 256w,\n/acorns/static/2a811de4a57e8b5a695713da2bd5a57a/36dd4/1586492860476.jpg 512w,\n/acorns/static/2a811de4a57e8b5a695713da2bd5a57a/6b964/1586492860476.jpg 537w\" sizes=\"(max-width: 537px) 100vw, 537px\" data-action=\"zoom\" style=\"max-width: 100%;position: absolute;top:0;left:0;width: 100%;height:100%;object-fit: cover;object-position: center;\"></div><br><div class=\"story_image_caption story_image_blank_caption\"></div></div></div><p></p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">同样的道理，如果使用 utf-8 编码，丁在 Unicode 字符集中的编号为 <code>0x4E01</code>，但它存储在计算机中并不是简单的将 <code>0x4E01</code> 翻译为对应的二进制。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">这里就要分清楚两个概念，字符集和字符编码。字符集是定义字符的，每一个字符在字符集中都有一个唯一的编号，Unicode 就是一个字符集，丁这个字符在 Unicode 字符集的编号是 0x4E01。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">字符编码是指将字符编号变换成二进制的方法。一个字符编号，有很多种方式可以存储在计算机中。例如，我想存储编号 10，我可以存储为二进制的 20，每次在计算机中取得数字后除以二就得到了我的编号。至于为什么不直接存储编号，大多是出于兼容性和方便解码的考虑。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">理解了这两个概念的不同，就能明白 utf-8，utf-16 的区别，他们都指的是 Unicode 字符集，但是代表的是不同的编码方法，同样的一个 Unicode 字符，经 utf-8 编码产生的二进制和 utf-16 编码产生的是不一样的。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">utf-8 的编码机制不算很复杂，<a href=\"https://zh.wikipedia.org/wiki/UTF-8\" class=\"xsj_link xsj_manu_link\">wiki</a> 里说的很清楚，这里就不在赘述了。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">现在来说说为什么要有乱码。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">当计算机打开一个文本文件的时候，他必须要知道这个是什么编码的。否则无法解码，因为在计算机眼中，一切都是二进制字节（我想起了 CSAPP 中的一句话：<em class=\"markdown_em_asterisk\">Information Is Bits + Context</em>）。但是不同的编码下相同的字节有不同的含义。同样是 0xABCD，在某一个编码下可能表示“丁“，在另一个编码下可能表示的就是“王”了。</p>\n<p class=\"xsj_paragraph xsj_paragraph_level_0\">打开文本文件的时候，如果不手动指定编码，大部分程序都会自动推测编码（怎么推测是另外一个话题了）。如果计算机推测的编码或者用户手动指定的编码和实际编码不符，那么自然就会出现“乱码”现象，也就是内容看上去乱七八糟，实际上在计算机看来，只是用特定的编码方式解码字符而已，只不过解码出来的字符不是你想要的。</p>\n</div>\n\n","excerpt":"很早之前就碰到过\"乱码\"这个现象，当时非常困惑，完全不能理解发生了什么。\n上大学以后，虽然开始接触计算机，不过我就没看到过具体讲解字符编码的内容。对这个领域始终是感到非常模糊。\n不过，最近好像豁然开朗了一下，感觉突然就明白了这个问题。\n下面我来解释一下我所理解的字符编码。\n首先，...","docType":"posts","slug":"cjting/about-string-encoding","title":"关于字符编码","customCss":"","createDate":"April 10, 2020","updateDate":"April 18, 2020","tags":["文章","转载","技术","字符编码"]}},"pageContext":{"slug":"cjting/about-string-encoding","prev":{"title":"正向代理与反向代理","docType":"posts","slug":"cjting/forward-proxy-and-reverse-proxy"},"next":{"title":"JavaScript 与 Unicode","docType":"posts","slug":"cjting/js-and-unicode"},"pluginOptions":{"tagsPath":"/tags/","archivesPath":"/archives/","basePath":"/","commentType":"gitalk"},"basePath":"/"}}}